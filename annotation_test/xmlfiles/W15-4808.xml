<sec_map><section><chunk>Temporal Forces and Type Coercion in Strings Derek Kelleher Trinity College Dublin Dublin 2 Ireland kellehdt@tcd.ie Tim Fernando Trinity College Dublin, Dublin 2, Ireland. Tim.Fernando@cs.tcd.ie Carl Vogel Trinity College Dublin, Dublin 2 Ireland. vogel@cs.tcd.ie Abstract Durative forces are introduced to Fi- nite State Temporality (the applica- tion of Finite State Methods to Tem- poral Semantics). Punctual and dura- tive forces are shown to have natural representations as fluents which place certain constraints on strings. These forces are related to previous work on stative explanations of aspectual classi- fication. Given this extended ontology, it is shown how type coercion can be handled in this framework. </chunk></section><section><heading>1 Introduction </heading><chunk>In recent years, a novel use of Finite State Methods has been their application to the field of Temporal Semantics (Fernando, 2014). Fi- nite sets of temporal propositions (called flu- ents) are treated as symbols of an alphabet, with strings capturing the temporal ordering of these propositions. Fluents in the same box are taken to hold at the same time, and flu- ents in subsequent boxes are taken to hold at subsequent times. For example, the untensed event reach the top can be represented as a simple state change from (at-the-top) to (at- the-top): at-the-top at-the-top (1) Since Vendler (1957), it has been common to classify verbs/predicates/events into one of four aspectual types: states, activities, accom- plishments, and achievements. The classifica- tion into these four different categories is based on whether an event is positive or negative for two binary features. The first feature is whether it can occur in the progressive. The second is whether it is telic (having a natu- ral end-point) or not. Activities occur in the progressive and are non-telic: John was walking. Accomplishments occur in the progressive and are telic: John walked a mile. Achievements do not occur in the progressive and are telic: John won the race. States do not occur in the progressive and are non-telic: John loved Mary. Dowty (1979) took states to be the primitive entity, and operators were proposed that acted on states to give the other classes. More re- cently, a fifth class known as semelfactives or points has been added to the traditional four- fold classification. A more recent approach to verbs known as Degree Achievements, such as cool, posits that properties such as telicity/durativity are based on scales that a property of an argu- ment of the verb moves along. In the case of the soup cooled, the temperature of the soup moves negatively along a temperature scale. Viewing the temperature of the soup as a state, this approach can be seen to be in the same vein as Dowtys, with observations of changes in state being the main factor in determining aspectual category. However, this approach seems unsatisfac- tory in certain cases. There are punctual events where the start state is identical to the end state (blink), and durative events where it is extremely difficult to identify a natural scale that a property of the verb argument moves along (beat a man). From early on, the notion of force has played a part in aspectual classification, with Dowty (1979) distinguishing between states and activities by whether they could occur as complements of force: #John forced Harry to know the answer John forced Harry to run This paper introduces durative forces to Fi- nite State Temporality (hereafter referred to as FS-Temporality 1 ), and builds upon the use of punctual forces in Fernando (2008). Forces are shown to have natural interpretations as fluents (though having different properties to stative fluents). Stative consequences (if any) are spelt out using string constraints. Dura- tive forces are related to the semantic scales of Hay et al. (1999) and Beavers (2013), giving an explanation for durative phenomena based on scales in terms of forces. Interest in computational approaches to as- pectual phenomena is increasing in light of Van Lambalgen and Hamm (2008), where a first-order formalism, the Event Calculus, also using forces as part of its ontology, is imple- mented using logic programming. Finite state methods complement this approach, with well understood decidability properties, reducing references to the real line to regular languages. Some events, typically classified as one type, can behave as another type in certain cir- cumstances. For instance, accomplishments can be coerced into activities when combined with the progressive. This suggests a form of type coercion (Moens and Steedman, 1988). Cooper (2012) discusses the idea of seman- tics in flux, proposing that meaning be ana- lyzed in terms of structured objects that can be modified. In this spirit, the phenomenon of type coercion is analyzed using strings. </chunk></section><section><heading>2 Fluents and Strings </heading><chunk>Fluents are taken to be primitives in FS- Temporality, with strings being drawn from an alphabet consisting of finite sets of fluents. These fluents are temporal propositions, inter- preted relative to intervals. A satisfaction re- lation |= relates fluents to intervals, with 1 Though the abbreviation FST will be used in sub- scripts. It is hoped that no confusion will arise with Finite State Transducers. I |= (2) indicating that the fluent is true over the interval I. Given a set of fluents, the alphabet can be formed by taking 2 , the power set of , consisting of all subsets of (including the empty set). As an example, take = {a,b}. The alphabet = {{}, {a},{b}, {a,b}}. To increase legibility, the curly braces surround- ing fluents are replaced with boxes, giving = { , a , b , a,b }. The set of fluents is divided into three ba- sic types, representing states, punctual occur- rences, and continuous occurrences. These flu- ents will have certain properties reflecting the different temporal behaviour of these entities. If a fluent is homogeneous then whenever it is true of an interval, it is true of every subin- terval of that interval: I |= = (I I)I |= (3) If a fluent is quantized then whenever it is true of an interval, it is not true of any proper subinterval of that interval: I |= = (I I)I |= (4) If a fluent is -causative then whenever is true of an interval, and there is no - causative fluent true of that interval, is true of a subsequent interval: (I)I |= and I |=F [] implies (I )(I m I and I |= ) (5) If a fluent is -causative (for some fluent ) then it is said that is a force for . If a fluent is -causative (for some fluent ) then it is said that is a force against . That is a force for can be written as :F[], and F[] can be written in place of when we are solely concerned with its causative property. That is a force against can be written as :F[]. If a fluent is inertial then whenever holds of an interval and no fluent that is a force against holds of that same interval, then holds of some subsequent interval: (I)I |= and I |= F []) implies (I )I m I and I |= (6) As mentioned above, given these four prop- erties of fluents, we can distinguish be- tween three types of fluents: stative fluents (type s F ST ), punctual occurrence fluents (type e F ST ), and durative occurrence fluents (type f F ST ). Stative fluents are intuitively homo- geneous, inertial, and non-causative. If John loves Mary for a month, he loves her for every part of that month (homogeneity). If John knows a fact today, he will know the fact a week later, unless something causes him to for- get it (inertial). A state holding does not entail that subsequently another state will hold, or cease to hold (non-causative). Unlike states, where there is no change over an interval they hold of, occurrences mark change. A punctual occurrence fluent indi- cates a change over an interval it holds of. A punctual occurrence fluent is quantized, non-inertial, and can be causative or non- causative. If the fluent is causative, then not only does it mark change, it specifies the results of that change. The importance of this distinction (between simply marking change, and specifying the results) can be seen in the distinction between achievements and semelfactives. An achievement is typically thought to be a punctual occurrence, resulting in some new state holding. For instance, the achievement reach the top (of, say, a mountain) results in the state of being at the top of the mountain. A semelfactive, or point, makes no such com- mitment to a consequent state. It is difficult to imagine what state results from prototypi- cal examples of semelfactives, such as sneeze or blink. Dowty explained achievements in terms of states by positing an operator BECOME that operates on a state. BECOME() is true at time t if was false before t, and true after it. The achievement reach the top then be- comes BECOME(at-the-top). Semelfactives resist a stative explanation such as this, be- cause they have no salient results. Allowing event fluents which mark change and possibly specify the consequences of that change solves this problem: Achievement: e, Semelfactive: e It may seem strange to associate a punctual occurrence with an interval. However, Com- rie (1976) notes that punctuality is a matter of perspective, describing a video of a cough (typically thought of as punctual) slowed down so that the cough now has duration. Here, punctuality is a structural notion, and not a strictly temporal one. Punctual occurrences are viewed as having no internal structure, while durative/continuous occurrences do. 2 A continuous/durative occurrence also marks change over an interval, but may be part of a larger change. For instance, walking (if the distance/time is unspecified) may be broken up into multiple stages of walking, and these substages can be repackaged together into a larger walking. Punctual occurences mark the entire change, and cannot be bro- ken up and repackaged in the same manner. This has linguistic consequences in terms of telicity. Durative occurrence fluents are there- fore homogeneous in contrast to the quantized nature of punctual occurrence fluents, though like punctual occurrence fluents, they are non- inertial and can be causative or non-causative. Since Moens and Steedman (1988), it has been common to associate a complex structure based on contingency/causation with events. An event nucleus is an association of a goal event or culmination with a preparatory pro- cess by which it is accomplished, and a conse- quent state which ensues. So climb a moun- tain is made up of a preparatory process of a climb, a culmination reach the top and a consequent state at the top. This struc- ture can be formalized as a string using three functions (proc, cul, and cons), which act on fluents of type e F ST and return fluents of all three types: proc: e F ST f F ST . Associates an event fluent representing a punctual change, 2 The second author holds a different view, being of the opinion that the distinction drawn here between structural and temporal notions can be avoided by an appropriate choice of fluents and the use of stutterless strings. with a durative force fluent representing its preparatory process. cul: e </chunk></section><section><heading>F ST e </heading><chunk>F ST . Associates an event fluent representing a punctual change, with another event fluent, also represent- ing a punctual change, the culmination of the event. For example, cul(climb-a- mountain)= reach-the-top. From this it is clear why punctuality is taken to be a structural rather than a temporal notion. Climb a mountain and reach the top of the mountain are both punctual occur- rences, but with vastly different temporal spans. cons: e </chunk></section><section><heading>F ST s </heading><chunk>F ST . Associates an event fluent representing a punctual change, with a stative fluent representing its con- sequent state. Essentially, for fluent e 1 of type e F ST , cul(e 1 ) is causative and a force for cons(e 1 ). The contingency/causal structure can be captured through string constraints. Fernando (2006) defines a constraint: L = L (7) as the set of strings such that whenever s n L m , then s n L m . is the relation subsumes, defined as fol- lows: If s and s are strings, where s = 1 . . . n and s = 1 . . . k we say s s iff n = k, and for every i, i i . So every symbol of s contains all the fluents (information) of the correspond- ing symbol of s , and possibly more. An example may make this concept clearer. The constraint = says that if a string contains two consecutive boxes that can be subsumed by the language on the left hand side of the above implication, then in that string, those two boxes must be subsumed by the sequence on the right-hand side of the im- plication, i.e. any string that has in a box must have in the next box. So the string meets this constraint, but the string does not. The following constraints relate both proc(e) to cons(e), with cul(e) acting as a me- diator between the two: cul(e) proc(e) = (8) Constraint (8) says that no string can have a box containing cul(e) immediately followed by a box containing proc(e), formalizing the constraint that cul(e) ends proc(e). Of course it is possible for a process to continue after a culmination, leading to a further culmina- tion. Take the example of climbing where the second highest peak is reached. The climb- ing process will continue after this culmina- tion until a new culmination of reaching the highest peak occurs. This can be avoided by positing two different events for climbing to the second highest peak, and climbing the mountain (the highest peak). Representing these two different event by fluents e 1 and e 2 respectively, the preparatory process of climb- ing to the second highest peak will be proc(e 1 ), while the preparatory process of climbing to the highest peak will be proc(e 2 ). Obviously, these processes are the same until the second highest peak is reached, but the culmination of reaching that peak will terminate proc(e 1 ), but not proc(e 2 ). cul(e) = cons(e) (9) Constraint (9) says that if any box contains cul(e), it must be immediately followed by a box containing cons(e), formalizing the con- straint that cul(e) causes cons(e). It is not proposed that all fluents result- ing from applications of these functions will have a linguistic realization. It is doubtful that proc(cul(cul(cul(reach the top)))) makes any sort of cognitive or linguistic sense. And as mentioned before, semelfactives have no salient consequent state. Either cons(cough) would have no value, or could have some con- sequnce of coughing as a value, with lack of salience equating to lack of a causal constraint between cul(cough) and cons(cough). As noted above, telicity is one of the di- agnostic criteria for aspectual classification. The difference between walking (activity), and walking a mile (accomplishment) is that walking a mile has a natural end-point (reaching the end of the mile). In stative ac- counts this would usually be represented as a transition from a state of not having walked a distance of a mile, to a state of having walked a distance of a mile. As in the case of achieve- ments vs. semelfactives, this can be given a causative explanation, an event being telic if it has a causative constraint such as (9) associ- ated with it. So telicity is explicable in terms of fluents and string constraints. From here on, these punctual and durative fluents, previously called occurrences, will be called forces. The initial reluctance to do so stems from the expectation that a force must be a force for or against some stative fluent. The lack of consequences of a punctual oc- currence such as sneeze may seem to argue against associating it with a force. However, it is assumed here that if there has been an oc- currence, whether the stative effects of this are stated or not (due to lack of salience for example), then a force has caused this. The difference between forces which specify the re- sulting stative change, and those that do not, is brought out using string constraints. </chunk></section><section><heading>3 Continuous Forces and Scales </heading><chunk>Kennedy and Levin (2008) propose that the behaviour of incremental theme verbs (eat), degree achievements (cool), and directed motion verbs (ascend) arises from one shared element of their meanings: a measure of the degree to which an object changes rela- tive to some scalar dimension over the course of an event. Under this analysis, verbs based on gradable adjectives like cool directly lex- icalize measure functions which (given an ob- ject and a time) return a value of a degree on a scale. In the case of cool, this is likely to be a degree on a temperature scale. Fernando (2014) encodes this idea in string form, by defining a stative fluent deg &lt; d as: I |= deg &lt; d (r I)deg(r) &lt; d (10) meaning that every degree in the interval is less than d. Another stative fluent deg is defined as: x(deg &lt; x P rev(x deg)) (11) holding of an interval if the degree of that in- terval is less than some degree x, but the de- gree of the previous interval was greater than that degree x (i.e. the degree has fallen going from one interval to the next). Defining an operator on fluents [] as: I |= [] (I I)I |= (12) and letting the start of an hour be marked by x, and the end of an hour by hour(x), the soup cooled in an hour can be represented by the string: x []deg hour(x),[]deg (13) As in the punctual case (Achievements vs. Semelfactives), a stative account of durative change is not always satisfactory. Beavers (2013) uses the idea of a force recipient from Hovav and Levin (2001) to make aspectual classifications. Various linguistic tests are di- agnostic of whether a force causes change or not: What happened to the lamp is that John rubbed it. #What happened to the lamp is that John saw it. John rubbed the lamp but nothing changed about it. Beavers classifies rub as having the po- tential for change, positing the existence of a latent scale. That the lamp in the above example could undergo change can be seen in the following example: John rubbed the lamp clean. The combination of happening and see- ing is not always problematic. For instance, What happened to the password is that John saw it. But seeing a password seems to go hand in hand with changing a password, and is perhaps viewed as being a force for that change, or at least part of the force. As well as the possibility of undergoing change, Beavers makes aspectual classifica- tions based on the complexity of the underly- ing scale, with a simplex scale having two sub- parts, and a complex scale having more than two subparts. Punctuality of an event is seen as resulting from an object undergoing change along a simplex scale, while durativity is seen as resulting from an object undergoing change along a complex scale. Beavers analysis fails when applied to verbs such as sit, typically thought of as states, but unlike most states, able to appear in the progressive. Firstly, note that sitting can be seen as application of a force: What happened to the chair is that John sat on it (Here the durative act of sitting is meant, rather than the punctual initial act of sitting down). ?John sat on the chair and nothing changed about it The latter may be acceptable for a hard, wooden chair, but unacceptable for a soft arm- chair that sags under the weight of a person sitting in it. The potential change a chair can undergo while being sat on is therefore along a simplex scale, going from its initial state to a sagging state during the initial event of being sat upon. The following durative event of sitting causes no change whatsoever. The question arises as to how the progressive applies to this dura- tive sitting, when the progressive is thought to require multiple stages (Landman, 1992). Given this, it seems the notion of a continuous force is necessary to explain when the progres- sive can occur. It is interesting to note that these stative verbs that can appear in the progressive coin- cide with what Maienborn (2007) calls David- sonian states, in contrast to Kimian states (predicates such as tall). Key properties of these two different types of states are given, Davisonian states being perceptible, and lo- catable in space and time, while Kimian states are neither perceptible nor locatable in space (though they are locatable in time). It is pos- sible these properties can be related to forces, and their spatiotemporal nature. Durative forces can be related to semantic scales in the string approach using string con- straints: proc(e) = deg (14) essentially saying that when proc(e) holds (for example a cooling), deg will hold in the next box (the temperature will have fallen). The above treatment gives no information about the actual degrees of the soup while it is undergoing change. Certain functions describing change will have an end-point or maximum/minimum. This may be contextually given, as Fernando assumes, or may be a natural feature of the scale against which change is measured. Closed scales (such as smooth) have a natu- ral maximum/minimum, complete smoothness in this case (Solt, 2015). Fluents deg max and deg min can be defined, that are true whenever the maximum/minimum of an underlying con- tinuous change function is reached. Viewing proc(e) as the force which causes the change along the semantic scale means that cul(e) both ends the force and causes the maximum/minimum to be reached. This is formalized in the following constraint: proc(e),cul(e) = deg max 4 Aspectual Types Now that the properties of the different fluent types, and the various string constraints that can be formed from them, have been given, it is possible to give an account of the five aspectual types: semelfactives, achievements, accomplishments, activities, and states. Each of these will consist of a set of fluents, along with a set C of constraints that must be ap- plied to any language that has as part of its alphabet. While in practice the fluents used would have relevant names (the fluent cough representing a cough), here, general fluents such as e,f, and s will be used, where e is understood to be a fluent of type e F ST , and similarly for the others. Semelfactive: = {e}, C = Achievement: = {e, cons(e)}, C = { e = cons(e) } Activity: = {f, deg }, C = { f = deg }. Here the fluent deg is optional, along with the constraint. Accomplishment: If viewed punctually then the same representation as an achievement. If viewed duratively then = {f, deg , e, deg max }, C = { f = deg , e = deg max } State: = {s}, C = { s = s + F[ s] }. This constraint encodes the inertial property of stative fluents, indi- cating that if the state s holds in a box, it will continue to hold in the next box, unless the first box contained a force that caused it to not hold (The + sign being interpreted as disjunction). </chunk></section><section><heading>5 Type Coercion </heading><chunk>Aspectual classification is not static. In cer- tain contexts, an event typically classified as one type may shift and be interpreted as being of a different type. This phenomenon is known as type coercion in an analogy with a similar phenomenon in programming languages. In FS-Temporality, an event is assigned to a certain type based on two criteria: what flu- ents are used to describe it; and the tempo- ral/causal relationship between these fluents, given by string constraints. Examples of this have already been seen, with the difference between Achievements and Semelfactives be- ing that Achievements have consequences de- scribed by stative fluents, which are related to the force that caused them through string constraints. A number of different cases of type coercion are given below. These can be accounted for in FS-Temporality through changes in the un- derlying alphabet (the fluents which describe the event), and the application or deletion of string constraints (the causal/temporal rela- tion between fluents). At this point it is convenient to introduce in- verse functions for proc, cul, and cons, return- ing the perfective event of which they are the preparatory process, culmination, and conse- quent state. For instance cul 1 (reach-the-top) = climb-the-mountain. As with the proc, cul, and cons, the inverse functions may not re- turn a linguistically coherent value. However, in the following examples, it is assumed that they do. </chunk></section><section><heading>5.1 Achievements Accomplishments </heading><chunk>As pointed out by Moens and Steedman (1988), the progressive applies to a process (activity), or culminated process (accomplish- ment), which conflicts with the following: John was reaching the top (15) Reach the top is usually seen as a culmi- nation (achievement), punctual with an associ- ated consequent state. The progressive coerces this culmination into a culminated process by adding a preparatory process, and focussing on this. Taking reach-the-top as a fluent of type e F ST , the preparatory process of this is proc(reach-the-top). This can be added to the set of fluents under consideration. It is a fluent of type f F ST , so is homogeneous, iner- tial, and may be causative. String constraints can be applied which relate proc(reach-the- top) to cul(reach-the-top) and cons(reach-the- top) (which would presumably be at-the-top). As a durative force, it can occur in the pro- gressive. </chunk></section><section><heading>5.2 Semelfactives Activities </heading><chunk>Typically, the progressive can only apply to activities and accomplishments, focussing on their preparatory processes. Achievements and semelfactives, not having preparatory pro- cesses, should be infelicitous with the progres- sive. However, contrary to expectations, the progressive can occur with semelfactives, and as Pulman (1997, p. 9) notes, with achieve- ments under special circumstances. John was sneezing. The most common view (Moens and Steed- man, 1988, p. 17) of how the progressive can apply to semelfactives, such as sneeze is that they are coerced through iteration into becom- ing a series of sneezes, and thus a process. In string form this is represented by: e e e . . . (16) as opposed to: e (17) This does not work for achievements as e, iterated becomes: e, e,, e,, . . . (18) with and appearing in the same box lead- ing to a contradiction. The special circumstance given by Pulman is the slowing down of time to a scale where the punctual Achievement is viewed as having du- ration. From this, a preparatory process can be identified, and the progressive applied to it. For instance, the sentence: John was sneezing when Mike punched him could suggest two different scenarios: John was sneezing multiple times when Mike punched him, or that John sneezed once, and the punch landed mid-sneeze. The example of slowing down a cough to view its internal structure suggests that the proc function can be applied to Semelfactives to give a fluent (of type f F ST ) representing their internal, durative structure (as a dura- tive force). This fluent proc(e) would hold whenever e holds, but in contrast to e, can hold over an interval that contains multiple instances of e. So the strings: e e e . . . proc(e) proc(e) proc(e) proc(e) can all hold of the same interval (the latter two can hold of the same interval due to the homogeneity of fluents of type f F ST ). Therefore, both Pulmans special coercion and Moens and Steedmans iterative coercion can be captured by replacing the fluent e in the alphabet with proc(e), a durative force fluent that the progressive applies to. </chunk></section><section><heading>5.3 Accomplishments Activities </heading><chunk>Moens and Steedman discuss the case of an accomplishment being coerced into an activity in the presence of the progressive: Roger was running a mile (19) Note that Roger was running a mile does not entail that Roger ran a mile, but does entail that Roger ran. This is known as the imperfective paradox, and is evidence that the progressive is being applied to the prepara- tory process and not the accomplishment as a whole. For this coercion to happen, the culmination and consequent state must be stripped off, leaving the preparatory process. In FS-Temporality, this is achieved by ap- plying the function proc to e, and deleting the constraints: cul(e) proc(e) = cul(e) = cons(e) ensuring that the preparatory process of walking is not asserted to have ended and caused some consequent state to hold. 6 Conclusion Previous approaches to Temporal Semantics using Finite State Methods based on stative change have been augmented with the addi- tion of forces. Fluents representing both punc- tual and durative forces have been shown to have different properties to fluents represent- ing states. Fluents of all three types are nec- essary to represent the event nucleus of Moens and Steedman in string form. Both telicity and the distinction between achievements and semelfactives have been shown to be explica- ble in terms of whether a force is associated with a resulting state, a distinction captured through constraints on strings. The introduction of durative forces has added to the representation of semantic scales by strings, explaining the aspectual classifica- tion of durative events where no stative change takes place. Where stative change can be ob- served, forces can be related to this change through string constraints. A bottom up approach has been taken to type coercion, where types come about through choice of fluents and applicability of string constraints. Various different coercions are shown to be implementable in a finite state framework. Given that instances of types are invariably represented as strings, this unified approach will feed into future work on the ef- fect of types on simple narrative structure, and the possibility of representing this using Finite State Methods. </chunk></section><section><heading>References </heading><chunk>John Beavers. 2013. Aspectual classes and scales of change. Linguistics, 51(4):681706. Bernard Comrie. 1976. Aspect: An introduction to the study of verbal aspect and related problems, volume 2. Cambridge university press. Robin Cooper. 2012. Type theory and semantics in flux. Handbook of the Philosophy of Science, 14:271323. David R Dowty. 1979. Word meaning and Montague grammar: The semantics of verbs and times in generative semantics and in Mon- tagues PTQ, volume 7. Springer Science &amp; Business Media. Tim Fernando. 2006. Finite-state temporal pro- jection. In Implementation and Application of Automata, pages 230241. Springer. Tim Fernando. 2008. Branching from inertia worlds. Journal of Semantics, 25(3):321344. Tim Fernando. 2014. Incremental semantic scales by strings. EACL 2014, page 63. Jennifer Hay, Christopher Kennedy, and Beth Levin. 1999. Scalar structure underlies telic- ity in degree achievements. In Proceedings of SALT, volume 9, pages 127144. Malka Rappaport Hovav and Beth Levin. 2001. An event structure account of english resulta- tives. Language, 77(4):766797. Christopher Kennedy and Beth Levin. 2008. Mea- sure of change: The adjectival core of degree achievements. Adjectives and adverbs: Syntax, semantics and discourse, pages 156182. Fred Landman. 1992. The progressive. Natural language semantics, 1(1):132. Claudia Maienborn. 2007. On davidsonian and kimian states. In I Comorovski and K von Heusinger, editors, Existence: Syntax and Se- mantics, pages 107130. Kluwer, Dordrecht. Marc Moens and Mark Steedman. 1988. Tempo- ral ontology and temporal reference. Computa- tional linguistics, 14(2):1528. Stephen G Pulman. 1997. Aspectual shift as type coercion. Transactions of the Philological Soci- ety, 95(2):279317. Stephanie Solt. 2015. Measurement scales in nat- ural language. Language and Linguistics Com- pass, pages 1432. Michiel Van Lambalgen and Fritz Hamm. 2008. The proper treatment of events. John Wiley &amp; Sons. Zeno Vendler. 1957. Verbs and times. The philo- sophical review, pages 143160. </chunk></section></sec_map>