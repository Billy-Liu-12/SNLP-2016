<sec_map><section><chunk /></section><section><heading>A Direct Link between Tree-Adjoining and Context-free Tree Grammars </heading><chunk>Kilian Gebhardt and Johannes Osterholzer Faculty of Computer Science Technische Universit  at Dresden 01062 Dresden, Germany {kilian.gebhardt,johannes.osterholzer}@tu-dresden.de Abstract The tree languages of tree-adjoining gram- mars are precisely those of linear monadic context-free tree grammars. Unlike the original proof, we present a direct trans- formation of a tree-adjoining grammar into an equivalent linear monadic context-free tree grammar. </chunk></section><section><heading>1 Introduction </heading><chunk>Tree-adjoining grammars (tag) are tree-generating systems which enjoy widespread use in natural lan- guage processing to model syntactic phenomena which can not be adequately described by context- free grammars. In contrast, context-free tree gram- mars (cftg) were investigated in the field of formal tree languages, and there is arguably more insight on their tree languages than on those of tag: to name just a few results, they were characterized by least fixed points (Engelfriet and Schmidt, 1977), in Chomsky-Sch  utzenberger-like theorems (Arnold and Dauchet, 1977; Kanazawa, 2013), or by push- down machines (Guessarian, 1983). Moreover, var- ious syntactic restrictions of cftg have been investi- gated (Leguy, 1981; Fujiyoshi and Kasai, 2000). Kepser and Rogers (2011) proved that the tree languages of tag are precisely those of linear monadic cftg (lm-cftg), and hence, the established results about cftg can also be applied to tag. How- ever, this proof rests upon a number of intermediate normal forms. In particular, in the construction of a lm-cftg G from a tag H, three steps are involved: first, a footed cftg G is read off from H, then G is turned into a spinal-formed cftg G , and finally a result by Fujiyoshi and Kasai (2000) on spinal- formed cftg is applied to obtain G from G . Therefore the relationship between H and its equivalent cftg G is not immediately apparent, as all involved constructions must be understood and reenacted to obtain H. Moreover, much of the struc- ture of H is altered along the way to G. In the fol- lowing, we describe an alternative direct construc- tion of an equivalent linear monadic cftg G from H. We argue that G resembles H very closely. After introducing some preliminary notions in Section 2, we will describe our construction and prove its correctness in Section 3. Section 4 illus- trates the construction in an example, and contrasts it to the construction of Kepser and Rogers. </chunk></section><section><heading>2 Preliminaries </heading><chunk>The set of nonnegative integers is N, and B is the set of truth values {f, t}. The power set of a set A is 2 A . Denote, for n N, the sets of variables {x 1 , . . . , x n } and {y 1 , . . . , y n } by X n , resp. Y n . An alphabet is a finite nonempty set. We will briefly introduce the notation used for trees and their operations; for a thorough introduc- tion to tree languages refer to G  ecseg and Steinby (1984); see also F  ul  op and Vogler (2009) for a no- tation that is closer to ours. Contrary to custom, we consider unranked trees, but the number of children of a node will be bounded by a constant . Thus, there is no impact on the power of the employed formalisms. So assume some global constant N, and let the alphabet C consist of the three symbols (, ), and ,. Let be an alphabet, and let V be a set, both disjoint from C. The set U (V ) of trees (in- dexed by V ) is the smallest set U ( V C) such that V U and for each 0 k , , and 1 , . . . , k U , also ( 1 , . . . , k ) U . Given W V , a tree U (V ) is linear (nondeleting) in W if every element of W appears at most (at least) once in . Henceforth, denotes an alpha- bet; when not mentioned, the number k (of chil- dren of a node) will be quantified implicitly by k {0, . . . , }. We write U for U (). Let , U (V ) for some set V. We denote the set of positions of by pos() N . Let w pos(). The result of replacing the subtree of at w by is written [] w . Finally, let v 1 , . . . , v k V be pairwise distinct, and 1 , . . . , k U (V ). Denote by [v 1 / 1 , . . . , v k / k ] the result of substituting every occurrence of v i in with i , for 1 i k. We recall one-state top-down tree transducers (td-tt 1 ), cf. Engelfriet (1975). Let be an alphabet. A td-tt 1 from U to U is given by a finite set of rules of the form ((x 1 , . . . , x k )) , where is the sole state of , , and U ((X k )), with (X k ) = {(x i ) | x i X k }. The tree trans- formation of is given by term rewriting, it is a function U 2 U (or a partial function U U if is deterministic), and also denoted by . A context-free tree grammar (cftg) over is a tuple G = (N, , S, P ) such that and N are dis- joint alphabets, S N, and P is a finite set of pro- ductions of the form A(y 1 , . . . , y k ) for some A N, and U N (Y k ). Such a production is linear (nondeleting) if is linear (nondeleting) in Y k . We call a cftg G linear (resp. nondeleting) if every production of G is so, and G is monadic if the only variable occurring in its productions is y 1 . In this case, y 1 is written as y. A lm-cftg is a linear and monadic cftg. Let G = (N, , S, P ) be a cftg. Given 1 , 2 U N , we write 1 G 2 if there are A(y 1 , . . . , y k ) is in P, 1 , . . . , k U , and w pos( 1 ) such that 1 | w = A( 1 , . . . , k ) and 2 = 1 [[y 1 / 1 , . . . , y k / k ]] w . This corre- sponds to the second-order substitution of the oc- currence of A at w by . The tree language of G, denoted L(G), is the set { U | S G }. Let Z be a finite set. The set of tag labels is = {{, V, c, f | , V Z, c, f B}. This notation is similar to the one of Kepser and Rogers (2011): in , V, c, f , is the label, V the selective adjunction constraint, and c the obligatory adjunction constraint. The information whether , V, c, f labels a foot node is stored in f . It is a foot label if f = t, and we say that it is operative (resp. terminable) if V = (resp. c = f). Let U denote the set of all U with no occurrence of a foot label. Moreover, let U be the set of all U with exactly one occurrence of a foot label, such that this occurrence is a leaf of . In this situation can be decomposed into a unique U (X 1 ) with no occurrence of a foot label and exactly one occurrence of x 1 , as well as a , V, c, t such that = [, V, c, t]. We will use this notation in the sequel. A (non-strict) tree-adjoining grammar (nstag) 1 1 A tag is non-strict if certain restrictions on its adjoining is a tuple H = (, Z, E, I, ) such that Z is a fi- nite set (of names), E is a finite subset of U (of elementary trees), I is a finite subset of U (of initial trees), and : E Z is a bijection. Let 1 , 2 U, and H be an nstag. We write 1 H 2 if there are w pos( 1 ) and e = e[, V , c , t] E such that 2 is the result of adjoining the elementary tree e at the node w of 1 i.e., we have 1 | w = , V, c, f ( 1 , . . . , k ) for some , V, c, f with (e) V , and 2 = 1 [  e[, V , c , f( 1 , . . . , k )]] w . The tree language of H, denoted by L(H), is the set of all U such that there are an i I and a U that contains only terminable nodes, with i G , and = 4 1 (), the node-wise projection of to the node label. </chunk></section><section><heading>3 Main Construction </heading><chunk>We will now describe our method to construct an equivalent lm-cftg G from a given nstag H. As noted by Kepser and Rogers, the main obstacle in simulating nstag by lm-cftg is the fact that in a derivation step of H, an arbitrary number of trees can be adjoined to the foot node of an elementary tree, while lm-cftg only allow the substitution of one tree for the variable y in the right-hand side of a production. Consider the derivation of H that is portrayed in Fig. 1. This derivation takes place at an adjunction site labeled F with child trees 1 , . . . , k . In each step of the derivation, an adjunction site is chosen, and an elementary tree is adjoined at that site. In particular, if the adjunction operations up to that point contributed foot nodes that are oper- ative, the respective adjunction site may again be the direct parent node of the trees 1 , . . . , k . In a successful derivation, however, eventually some elementary tree must contribute a terminable foot node, say some as in Fig. 1, which is not subject to any further adjunction operations, and becomes the parent node of 1 , . . . , k . In our construction of G, we model the above by guessing for every adjunction site F of a sentential form the terminal the children 1 , . . . , k of F will eventually end up with as a parent label. We then replace the k trees 1 , . . . , k in by the tree ( 1 , . . . , k ). Of course, in the ensuing derivation of G, this guess must be checked for correctness, so we encode the guess into a respective nonter- minal F, of G, and propagate the information operation are omitted, cf. Kepser and Rogers (2011). Our definition of nstag differs from ibid. in allowing initial trees without foot node. Clearly this difference is purely syntactical. 0 F 1 k H 0 1 k 0 F, 1 k G 0 1 k Figure 1: A derivation in H and its simulation in G. during the course of the derivation. If is eventu- ally adjoined as foot node, the guess was correct. As was already produced, we cut out the foot node of such elementary trees (as in Fig. 1) in the corresponding production of G, replacing it by y. Theorem 1. For every nstag H, there is a lm-cftg G such that L(G) = L(H). Proof. Let H = (, Z, E, I, ) be an nstag, and let N = {S} {, V, c, | , , V Z, c B}. Let : U 2 U N be a (nondeterministic) td-tt 1 with the rules (, V, c, f(x 1 , . . . , x k )) , V, c, (((x 1 ), . . . , (x k ))) for every V Z, , , and c B. Further, for every , let : U 2 U N (Y 1 ) be a td-tt 1 that has ev- ery rule of , as well as the rule (, V, c, t) , V, c, (y) for every V Z, , and c B. Construct the cftg G = (N, , S, P ), where (i) for every i I and i (i), the production S i is in P ; (ii) for every , V, c, f , , e 1 (V ), and e (e), we have that , V, c, (y) e is in P ; and (iii) for every and V Z, P contains , V, f, (y) y. We will demonstrate that L(G) = L(H). To show that L(H) L(G), we first prove that for every n N, i I, U, and (), when- ever i n H , then also S G . The proof is by induction on n. If n = 0, then = i, thus by def- inition S G . So assume there is U such that i n H H . Thus there are U (X 1 ) linear and nondeleting in X 1 , 1 , . . . , k U, some , V, c, f , and e = e[, V , c , t] E such that (e) V, = [, V, c, f( 1 , . . . , k )], and = [  e[, V , c , f( 1 , . . . , k )]]. As (), there must be some () and i ( i ) for 1 i k, e (  e), and such that = [  e [, V , c , ( ( 1 , . . . , k ))]]. Thus also (), where = [, V, c, ( ( 1 , . . . , k ))]. By the induction hypothesis, S G . Further- more, observe that e [, V , c , (y)] (e), hence by construction of G, there is the pro- duction , V, c, (y) e [, V , c , (y)], and therefore G . Now, let L(H). Thus there are i I and U such that i H , 4 1 () = , and all nodes of are terminable. Consider the tree (), where : U U N is a partial determinis- tic td-tt 1 with rules (, V, f, f(x 1 , . . . , x k )) , V, f, (((x 1 ), . . . , (x k ))) for every , and V Z. It is easy to see that () (), thus S G (). Moreover, () G , by produc- tions of type (iii). Hence L(G). To show that L(G) L(H), we prove that for every n N and U N , whenever S n+1 G using only productions of type (i) or type (ii), there exist i I and U such that i n H and (). The proof is by induction on n. If n = 0, then S is in P. By construction there is an i I such that (i), and thus i 0 H with = i. So assume that there is some U N such that S n+1 G G us- ing only productions of type (i) and (ii). As the last applied rule must be of type (ii), there are U N (X 1 ) linear and non-deleting in X 1 , , , V Z, U N , and e U N (Y 1 ) such that the production , V, c, (y) e is in P , = [, V, c, ( )], and = [e [ ]]. By induction, there exist i I and U such that i n H and (). Thus, there are U (X 1 ) linear and nondeleting in X 1 , 1 , . . . , k U and 1 ( 1 ), . . . , k ( k ) such that = [, V, c, f( 1 , . . . , k )], (), and = ( 1 , . . . , k ). By construction, there is e = e[, V , c , t] E such that e (e) and (e) V . Then also H , where = [  e[, V , c , f( 1 , . . . , k )]]. Thus, i n H . As e (e), there is e (  e) such that e = e [, V , c , (y)] and = [  e [, V , c , ( ( 1 , . . . , k ))]], thus (). Let L(G), i.e. U and S + G . Since G is linear and nondeleting, we may assume that there is U N such that S + G using only productions of type (i) and (ii) and G using only productions of type (iii). Thus, every nontermi- nal , V, c, occurring in needs to be such that = and c = f. As shown above, there are i I and U such that i H and (). In fact, = () and each node of is terminable, with as before. Obviously, = 4 1 () L(H). </chunk></section><section><heading>4 Illustration </heading><chunk>We will now illustrate our construction by a small example, and contrast its result to the outcome of the constructions applied by Kepser and Rogers. Let Z = {1, 2}, = {a, b}, and consider the set of initial trees I = {{b, {1, 2}, f, f} and the set of elementary trees E that is displayed in Fig. 2. The construction of Kepser and Rogers involves the following steps: (a) A tag H is transformed into an equivalent footed cftg G . Then (b) G is transformed into an equivalent spinal-formed cftg G , (c) for which a normal form exists that is linear and monadic, yielding the cftg G. 2 Regarding (a), footed cftg are the counterparts of tag in the world of cftg: a cftg is footed if it is linear and each of its productions right-hand sides has a unique node whose children are y 1 , . . . , y k , the variables occurring in . In fact, in the construction of G from H, these variables are just inserted below the foot nodes of its elementary trees. Every tag label becomes a nonterminal symbol. As to (b), we briefly sketch the concept of a spinal-formed cftg, which can be found in Fu- jiyoshi and Kasai (2000). To every nonterminal symbol A, we associate a nonnegative integer h(A), called the head of A, such that h(A) . Such an alphabet is said to be head-pointing. In every production A(y 1 , . . . , y k ) of a spinal-formed cftg, the variable y h(A) must occur exactly once in . The unique path from the root of to y h(A) is called the spine (of ). There is the additional restriction for spinal-formed cftg that each variable in Y k \ {y h(A) } occurs at least once in , and only as the child of some node on the spine. Further, if some nonterminal B is located on the spine, then its h(B)-th successor must be on the spine, too. Thus, to transform G into a spinal-formed cftg G , we create copies of each nonterminal (and its productions) with different heads. Afterwards, the nonterminals in the right-hand sides of productions only need to be replaced by the respective copy. 2 Formal definitions of these notions are omitted for brevity. We hope the comparison of the respective results stands for itself. Pertaining to (c), Fujiyoshi and Kasai (2000) present a method to transform any spinal-formed cftg into a linear and monadic normal form. After this transformation, the right-hand side of a produc- tion is either a non-branching tree of monadic non- terminals with leaf y, a single terminal, or of height 2. The crucial substeps involve replacing all sub- trees beside the spine by new nullary nonterminals, guessing an assignment for each variable except the head variable, and finally, collapsing the leaves be- side the spine into their neighboring nonterminals on the spine. The nondeterministic choice for the variables is propagated by extending the grammars nonterminals. Applying (a)(c) (and some simplifi- cations) yields the lm-cftg G, whose productions are displayed in Fig. 3. In contrast, our construction vertically expands every node of some initial or elementary tree by guessing a nonterminal and a terminal as described above. Thus, the overall structure of the trees is maintained. The useful productions of the grammar are depicted in Fig. 4. Obviously, our procedure can be refined by translating tag nodes that are non- operative and terminable just into terminals, thus avoiding useless nonterminals and productions. E = a, , f, f a, , f, f a, {1, 2}, f, f b, , f, t a, , f, f 1: , a, , f, f b, , f, f a, {1, 2}, f, f b, , f, t b, , f, f 2: Figure 2: Elementary trees and their names indicated to their left. S a, ay a, Z, f, ya b + a, by a, Z, f, yb b + b , y(y) y , y(y) y a, Z, f, y (y) a, ay a, Z, f, ya b, y y + a, by a, Z, f, yb b, y y + a, y y Figure 3: The lm-cftg obtained through the construction of Kepser and Rogers, where , , {a, b}. S b, Z, f, b b + b, Z, f, a a , V, f, (y) y , Z, f, (y) a, , f, a a , , f, a, Z, f, b b b, , f, y , , f, + a, , f, a a , , f, a, Z, f, a a b, , f, y , , f, Figure 4: The lm-cftg obtained through our construction, where , , {a, b} and V Z. References A. Arnold and M. Dauchet. 1977. Un Th  eor` eme de Chomsky-Sch  utzenberger dans le Cas des For ets Alg  ebriques. Calcolo, 14(2):161184. J. Engelfriet. 1975. Bottom-Up and Top-Down Tree TransformationsA Comparison. Mathematical Systems Theory, 9(2):198231. J. Engelfriet and E. M. Schmidt. 1977 and 1978. IO and OI. Journal of Computer and System Sciences, 15(3):328353, 16(1):6799. A. Fujiyoshi and T. Kasai. 2000. Spinal-Formed Context-Free Tree Grammars. Theory of Computing Systems, 33(1):5983. Z. F  ul  op and H. Vogler. 2009. Weighted Tree Automata and Tree Transducers. In M. Droste, W. Kuich, and H. Vogler, eds., Handbook of Weighted Automata, ch. 9, pp. 313404. Springer. F. G  ecseg and M. Steinby. 1984. Tree Automata. Akad  emiai Kiad  o. I. Guessarian. Pushdown Tree Automata. 1983. Math- ematical Systems Theory, 16(1):237263. M. Kanazawa. Multi-Dimensional Trees and a Chomsky-Sch  utzenberger-Weir Representation The- orem for Simple Context-Free Tree Grammars. To appear in Journal of Logic and Computation. Pub- lished online June 30, 2014. S. Kepser and J. Rogers. 2011. The Equivalence of Tree Adjoining Grammars and Monadic Linear Context-Free Tree Grammars. Journal of Logic, Language and Information, 20(3):361384. B. Leguy. 1981. Reducing Algebraic Tree Gram- mars. Proc. of Fundamentals of Computation The- ory, LNCS, vol. 117, pp. 226233. </chunk></section></sec_map>